#!/bin/sh
# script for creating and running docker containers for onionbalance with distinct descriptor mode
# used for verifying general functionality
# stand-alone script - all needed files are generated automatically
# Onionbalance Installation Guide: https://onionbalance.readthedocs.io/en/latest/v3/tutorial-v3.html
# credit goes to https://github.com/lu4p/tor-docker and https://github.com/FriendlyAdmin/onionbalance

# adjust sleep times as needed

# define number of backend instances
NUMBER_INSTANCES=<insert_here>

# define number of clients simultaneously connecting to onionbalance service
NUMBER_CLIENTS=<insert_here>

# set directory from where this script is started
HOST_DIR=<insert_here>

# create onionbalance environment
mkdir $HOST_DIR/onionbalance

# ----------------------------------------------------------------------------------
# onionbalance frontend service
# create onionbalance frontend service Dockerfile
echo 'FROM alpine:latest

RUN apk update && apk --no-cache upgrade && apk --no-cache add tini supervisor && apk add tor && apk add --virtual .build-deps \
        git \
        gcc \
        musl-dev \
        python3-dev \
        libffi-dev \
        openssl-dev \
        && \
    # Download Onionbalance with Distinct Descriptor Mode (Repo of Laura Donah)
    git clone https://github.com/nr24119/onionbalance.git && \
    # Build Onionbalance.
    cd onionbalance && \
    git checkout ddm && \
    python setup.py install && \
    # Remove dependencies.
    apk --no-cache del .build-deps && \
    # Delete apk cache to save some space.
    rm -rf /var/cache/apk/*
    
COPY supervisord.conf /etc/supervisord.conf

COPY torrc.default /etc/tor/torrc.default
RUN chown -R tor /etc/tor
RUN chown -R tor /var/log/tor

ENTRYPOINT [ "/sbin/tini", "--" ]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]' > $HOST_DIR/onionbalance/Dockerfile

# create torrc for onionbalance frontend service
echo 'Log notice file /var/log/tor/notices.log
Log debug file /var/log/tor/debug.log
RunAsDaemon 1
DataDirectory /var/lib/tor
SocksPort 0
ControlPort 127.0.0.1:6666' > $HOST_DIR/onionbalance/torrc.default

# create supervisord.conf for frontend service -- needed to exceute several tasks in a container
# order of events: 1. start Tor, 2.start OB-Config-Generator to create config.yaml containing the master key, 3. wait until all backend instances are running and start Frontend-Service (no restarts)
echo '[supervisord]
nodaemon=true

[program:tor]
user=tor
command=tor -f /etc/tor/torrc.default
priority=1
startsecs=0
autorestart=false
stdout_logfile=/var/log/supervisor-tor.log
stderr_logfile=/var/log/supervisor-tor.log

[program:onionbalance]
user=root
command=/onionbalance/onionbalance-config.py --hs-version v3 -n '$NUMBER_INSTANCES'
stdout_logfile=/var/log/supervisor-onionbalance.log
stderr_logfile=/var/log/supervisor-onionbalance.log
startretries=0
autorestart=false 

[program:onionbalance-restart]
user=root
command=/bin/sh -c "sleep 360s && /onionbalance/onionbalance.py --hs-version v3 -i 127.0.0.1 -p 6666 -c /config/config.yaml -v debug"
stdout_logfile=/var/log/supervisor-onionbalance.log
stderr_logfile=/var/log/supervisor-onionbalance.log
startretries=0
autorestart=false' > $HOST_DIR/onionbalance/supervisord.conf

# build frontend service image
docker build --no-cache -t onionbalance $HOST_DIR/onionbalance

# run frontend service container
docker run -d --name onionbalance onionbalance

# wait for tor to load up & for onionbalance to create key + sample config file
sleep 10

# copy config.yaml from frontend container to host & extract master key/onion address from config.yaml generated by the OB-Config-Generator
docker cp onionbalance:/config/config.yaml $HOST_DIR/onionbalance/config.yaml
# read master key from config.yaml
MASTER_KEY=$( tail -c 61 $HOST_DIR/onionbalance/config.yaml )
# master key looks something like this: 6wqlmsmeq2aogkvjg6f632hmf5myfr5qfeqa6hd5pngyv6pi6ppmavid.key
# format master key to onion address 
echo $( tail -c 61 $HOST_DIR/onionbalance/config.yaml ) > $HOST_DIR/onionbalance/temp.txt
MASTER_ONION=$( head -c 56 $HOST_DIR/onionbalance/temp.txt)'.onion'
# master onion looks somethinglike this: 6wqlmsmeq2aogkvjg6f632hmf5myfr5qfeqa6hd5pngyv6pi6ppmavid.onion
echo $MASTER_ONION
rm $HOST_DIR/onionbalance/temp.txt

# ----------------------------------------------------------------------------------
# backend instances
# repeated for every backend instance
i=1
while [ $i -le $NUMBER_INSTANCES ]
do
	# create backend instance environment
	mkdir $HOST_DIR/instance$i
	
	# create supervisord.conf for backend instance -- needed to exceute several tasks
	# order of events: 1. start tor, wait 5 seconds and kill process (needed to create key files e.g. for backend instance)
	# 2. start nginx webserver
	# 3. wait until all backends are loaded up and new torrc-files are created (with special configs to run as onionbalance backend instance)
	# no restarts 
	echo '[supervisord]
nodaemon=true

[program:tor]
user=tor
command=/bin/sh -c "tor -f /etc/tor/torrc.default && sleep 5s && pkill tor"
priority=1
startsecs=0
autorestart=false
stdout_logfile=/var/log/supervisor-tor.log
stderr_logfile=/var/log/supervisor-tor.log

[program:nginx]
user=root
priority=2
command=nginx -c /etc/nginx/nginx.conf
stdout_logfile=/var/log/supervisor-nginx.log
stderr_logfile=/var/log/supervisor-nginx.log
startretries=0
autorestart=false

[program:restart-tor]
user=tor
command=/bin/sh -c "sleep 160s && tor -f /etc/tor/torrc.default"
autorestart=false
stdout_logfile=/var/log/supervisor-tor.log
stderr_logfile=/var/log/supervisor-tor.log' > $HOST_DIR/instance$i/supervisord.conf

	# nginx config for every backend instance
	echo 'user                            root;
worker_processes                auto;

error_log                       /var/log/nginx/error.log warn;

events {
    worker_connections          1024;
}

http {
    include                     /etc/nginx/mime.types;
    default_type                application/octet-stream;
    sendfile                    on;
    access_log                  /var/log/nginx/access.log;
    keepalive_timeout           3000;
    server {
        listen                  80;
        root                    /var/lib/nginx/html;
        index                   index.html index.htm;
        server_name             localhost;
        client_max_body_size    32m;
        error_page              500 502 503 504  /50x.html;
        location = /50x.html {
              root              /var/lib/nginx/html;
        }
    }
}' > $HOST_DIR/instance$i/nginx.conf
	
	# Dockerfile for every backend instance
	echo 'FROM alpine:latest

RUN apk update && apk --no-cache upgrade && apk --no-cache add nginx tini supervisor && apk add tor --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ && rm -rf /var/cache/apk/*
COPY supervisord.conf /etc/supervisord.conf 
COPY nginx.conf /etc/nginx/nginx.conf
COPY torrc.default /etc/tor/torrc.default
COPY index.html /var/lib/nginx/html/index.html
RUN chown -R tor /etc/tor
RUN chown -R tor /var/log/tor

ENTRYPOINT [ "/sbin/tini", "--" ]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]' > $HOST_DIR/instance$i/Dockerfile

	# index.html for nginx server
	echo '<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>HTML5</title>
</head>
<body>
    Server '$i' is online
</body>
</html>' > $HOST_DIR/instance$i/index.html

	# torrc for backend instances (onion services loadbalanced by onionbalance)
	echo 'Log notice file /var/log/tor/notices.log
Log debug file /var/log/tor/debug.log
RunAsDaemon 1
DataDirectory /var/lib/tor

HiddenServiceDir /var/lib/tor/hidden_service/
HiddenServicePort 80 127.0.0.1:80' > $HOST_DIR/instance$i/torrc.default

	# build & start instance container 
	docker build  -t torbackend$i $HOST_DIR/instance$i
	docker run -d --name backend$i torbackend$i
	i=`expr $i + 1`
done


# prepare backend instances to work with onionbalance	
i=1
while [ $i -le $NUMBER_INSTANCES ]
do
	# backend instances need an additional entry in torrc & ob-config (contains frontend service address)
	echo 'Log notice file /var/log/tor/notices.log
Log debug file /var/log/tor/debug.log
RunAsDaemon 1
DataDirectory /var/lib/tor

HiddenServiceDir /var/lib/tor/hidden_service/
HiddenServicePort 80 127.0.0.1:80
HiddenServiceOnionbalanceInstance 1' > $HOST_DIR/instance$i/torrc.default

	# copy updated torrc and ob_config to backend instances (overwriting the existing torrc used for initial tor start up)
	docker cp $HOST_DIR/instance$i/torrc.default backend$i:/etc/tor/torrc.default
	echo 'MasterOnionAddress '$MASTER_ONION'' > $HOST_DIR/instance$i/ob_config
	docker cp $HOST_DIR/instance$i/ob_config backend$i:/var/lib/tor/hidden_service/ob_config
	echo $(date)
	# we need the hostnames of all our backend instances to create the onionbalance config.yaml
	# copy to host
	docker cp backend$i:/var/lib/tor/hidden_service/hostname $HOST_DIR/instance$i
	i=`expr $i + 1`
done

# create config.yaml from the hostnames of our backend instances
echo 'services:' > $HOST_DIR/config.yaml
echo '- instances:' >> $HOST_DIR/config.yaml
i=1
while [ $i -le $NUMBER_INSTANCES ]
do
	echo '  - address: '$(cat $HOST_DIR/instance$i/hostname)'' >> $HOST_DIR/config.yaml
	echo '    name: node '$i'' >> $HOST_DIR/config.yaml
	i=`expr $i + 1`
done 
echo '  key: '$MASTER_KEY'' >> $HOST_DIR/config.yaml

# copy completed config.yaml to frontend service container
# supervisor is used to start onionbalance with newly generated config.yaml
docker cp $HOST_DIR/config.yaml onionbalance:/config/config.yaml

# wait for all backend instances and the frontend service to load up and connect to tor, let onionbalance run a few minutes
sleep 360s

# ----------------------------------------------------------------------------------
# and finally set up & run the tor clients used for contacting the frontend service
mkdir $HOST_DIR/clients
echo '[supervisord]
nodaemon=true

[program:tor]
user=tor
command=tor -f /etc/tor/torrc.default
priority=1
startsecs=0
autorestart=false
stdout_logfile=/var/log/supervisor-tor.log
stderr_logfile=/var/log/supervisor-tor.log

[program:curl]
user=root
# contact our frontend service
command=/bin/sh -c "sleep 15s && /usr/bin/curl -v --output /service.log --proxy socks5h://127.0.0.1:9050 http://'$MASTER_ONION'"
stdout_logfile=/var/log/supervisor-curl.log
stderr_logfile=/var/log/supervisor-curl.log
startretries=5
autorestart=false' > $HOST_DIR/clients/supervisord.conf

echo 'FROM alpine:latest
	
RUN apk update && apk --no-cache upgrade && apk --no-cache add curl tini supervisor && apk add tor --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ && rm -rf /var/cache/apk/*
COPY supervisord.conf /etc/supervisord.conf 
COPY torrc.default /etc/tor/torrc.default
RUN chown -R tor /etc/tor

ENTRYPOINT [ "/sbin/tini", "--" ]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]' > $HOST_DIR/clients/Dockerfile

echo 'Log notice file /var/log/tor/notices.log
Log debug file /var/log/tor/debug.log
RunAsDaemon 1
DataDirectory /var/lib/tor' > $HOST_DIR/clients/torrc.default

# for clients only one image is needed since they are exactly the same
docker build --no-cache -t torclient $HOST_DIR/clients

i=1
while [ $i -le $NUMBER_CLIENTS ]
do
	docker run -d --name client$i torclient
	i=`expr $i + 1`
done

# wait for clients to load up and perform curl-requests
sleep 100s

# check if clients are connected to different backend instances
i=1
while [ $i -le $NUMBER_CLIENTS ]
do
	docker cp client$i:/service.log $HOST_DIR/clients
	echo 'Client '$i':
'$(cat $HOST_DIR/clients/service.log)'' >> $HOST_DIR/clients/all.log
	i=`expr $i + 1`
done 

# ----------------------------------------------------------------------------------
# repeat curl-Requests to get a wider sample of which backend instances were contacted
# every client needs to be restarted so that they get a new descriptor
REPEAT=120

for i in `seq 1 $REPEAT`
do
	j=1
	while [ $j -le $NUMBER_CLIENTS ]
	do
		docker stop client$j
		docker rm client$j
		docker run -d --name client$j torclient
		j=`expr $j + 1`
	done
	sleep 30s
	j=1
	while [ $j -le $NUMBER_CLIENTS ]
	do
		docker cp client$j:/service.log $HOST_DIR/clients
		echo 'Client '$j' Rerun '$i':
'$(cat $HOST_DIR/clients/service.log)'' >> $HOST_DIR/clients/all.log
		j=`expr $j + 1`
	done	
done 